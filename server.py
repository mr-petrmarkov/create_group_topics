from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telethon import TelegramClient, functions
from telethon.tl.functions.messages import CreateChatRequest
import uvicorn

# üîë —Ç–≤–æ–∏ api_id –∏ api_hash
api_id = 21334519
api_hash = "ad90b94b00185c6d9b0341af99121cf2"
session_name = "my_session"  # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ñ–∞–π–ª–æ–º my_session.session

app = FastAPI()

# —Å–æ–∑–¥–∞—ë–º Telethon client –æ–¥–∏–Ω —Ä–∞–∑
client = TelegramClient(session_name, api_id, api_hash)


@app.on_event("startup")
async def startup_event():
    await client.connect()
    if not await client.is_user_authorized():
        raise RuntimeError("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ù—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å my_session.session")
    print("‚úÖ Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")


@app.on_event("shutdown")
async def shutdown_event():
    await client.disconnect()


@app.post("/create_group")
async def create_group(request: Request):
    try:
        data = await request.json()
        title = data.get("title")
        users = data.get("users", [])

        if not title or not users:
            return JSONResponse(
                status_code=400,
                content={"error": "title –∏ users –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
            )

        # —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
        result = await client(CreateChatRequest(users=users, title=title))

        return JSONResponse(
            status_code=200,
            content={"status": "ok", "chat": str(result)}
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"error": str(e)}
        )


# üî• –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    uvicorn.run("server:app", host="0.0.0.0", port=8000, reload=True)
